// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPER_ADMIN
  ADMIN
  TRANSLATOR_EN
  TRANSLATOR_DE
}

enum LanguageCode {
  EN
  DE
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  hash     String
  username String @unique

  requestedRole Role?
  role          Role  @default(USER)

  appleTranslations    AppleTranslation[]
  categoryTranslations CategoryTranslation[]
  applesUpdated        Apple[]
  categoriesUpdates    Category[]
  categoriesAssigned   CategoriesOnApples[]

  @@map("users")
}

model Apple {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  updatedById Int
  updatedBy   User @relation(fields: [updatedById], references: [id])

  // TODO move name to translated table as accessionName will be untranslated
  name          String
  accessionName String @unique
  dataUrl       String

  genus          String?
  startFlowering DateTime?
  fullFlowering  DateTime?
  petalFall      DateTime?

  images       AppleImage[]
  translations AppleTranslation[]
  categories   CategoriesOnApples[]

  @@map("apples")
}

model AppleTranslation {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  languageCode LanguageCode

  // The actual translated fields
  description            String?
  pickingTime            String?
  size                   String?
  shape                  String?
  height                 String?
  width                  String?
  ribbing                String?
  crown                  String?
  groundColour           String?
  overColour             String?
  overColourAmount       String?
  overColourPattern      String?
  russet                 String?
  coarseness             String?
  fleshColour            String?
  // TODO
  // images                 String?
  greasiness             String?
  crunch                 String?
  juiciness              String?
  floweringTimeTree1     String?
  pickingTimeTree1       String?
  sizeTree2              String?
  shapeTree2             String?
  crownTree2             String?
  groundColourTree2      String?
  overColourTree2        String?
  overColourPatternTree2 String?
  russetTree2            String?
  ribbingTree2           String?
  heightTree2            String?
  widthTree2             String?
  juicinessTree2         String?

  // Relations to other tables
  updatedById Int
  updatedBy   User @relation(fields: [updatedById], references: [id])

  appleId Int
  apple   Apple @relation(fields: [appleId], references: [id])

  @@map("appletranslations")
}

model AppleImage {
  id Int @id @default(autoincrement())

  name String
  src  String

  appleId Int
  apple   Apple @relation(fields: [appleId], references: [id], onDelete: Cascade)

  @@map("appleimages")
}

model Category {
  id           Int                   @id @default(autoincrement())
  translations CategoryTranslation[]

  updatedById Int
  updatedBy   User                 @relation(fields: [updatedById], references: [id])
  apples      CategoriesOnApples[]

  @@map("categories")
}

model CategoryTranslation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  updatedAt   DateTime @updatedAt
  updatedById Int
  updatedBy   User     @relation(fields: [updatedById], references: [id])

  // Label is kinda the only real thing to add
  label        String
  languageCode LanguageCode

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("categorytranslations")
}

model CategoriesOnApples {
  apple        Apple    @relation(fields: [appleId], references: [id])
  appleId      Int // relation scalar field (used in the `@relation` attribute above)
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt   DateTime @default(now())
  assignedBy   User     @relation(fields: [assignedById], references: [id])
  assignedById Int

  @@id([appleId, categoryId])
}
